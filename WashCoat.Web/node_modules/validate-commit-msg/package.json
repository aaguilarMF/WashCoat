{
  "name": "validate-commit-msg",
  "description": "Script to validate a commit message follows the conventional changelog standard",
  "main": "index.js",
  "version": "2.6.1",
  "scripts": {
    "commit": "git-cz",
    "check-coverage": "istanbul check-coverage --statements 100 --branches 90 --functions 100 --lines 100",
    "report-coverage": "cat ./coverage/lcov.info | codecov",
    "test:watch": "istanbul cover -x *.test.js _mocha -- -R spec -w index.test.js",
    "test": "istanbul cover -x *.test.js _mocha -- -R spec index.test.js",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post"
  },
  "bin": {
    "validate-commit-msg": "index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kentcdodds/validate-commit-msg.git"
  },
  "keywords": [
    "githook",
    "commit",
    "message",
    "git",
    "conventional",
    "changelog"
  ],
  "author": {
    "name": "Kent C. Dodds",
    "email": "kent@doddsfamily.us",
    "url": "http://kentcdodds.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kentcdodds/validate-commit-msg/issues"
  },
  "homepage": "https://github.com/kentcdodds/validate-commit-msg#readme",
  "devDependencies": {
    "chai": "3.4.1",
    "codecov.io": "0.1.6",
    "commitizen": "2.5.0",
    "cz-conventional-changelog": "1.1.5",
    "ghooks": "1.0.3",
    "istanbul": "0.4.2",
    "mocha": "2.3.4",
    "semantic-release": "4.3.5",
    "sinon": "1.17.2"
  },
  "config": {
    "ghooks": {
      "commit-msg": "./index.js && npm t && npm run check-coverage"
    },
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    },
    "validate-commit-msg": {
      "helpMessage": "\nPlease fix your commit message (and consider using http://npm.im/commitizen)\n",
      "types": [
        "feat",
        "fix",
        "docs",
        "style",
        "refactor",
        "perf",
        "test",
        "chore",
        "revert",
        "custom"
      ],
      "warnOnFail": false
    }
  },
  "dependencies": {
    "findup": "0.1.5",
    "semver-regex": "1.0.0"
  },
  "readme": "# validate-commit-msg\n\n[![travis build](https://img.shields.io/travis/kentcdodds/validate-commit-msg.svg?style=flat-square)](https://travis-ci.org/kentcdodds/validate-commit-msg)\n[![codecov coverage](https://img.shields.io/codecov/c/github/kentcdodds/validate-commit-msg.svg?style=flat-square)](https://codecov.io/github/kentcdodds/validate-commit-msg)\n[![version](https://img.shields.io/npm/v/validate-commit-msg.svg?style=flat-square)](http://npm.im/validate-commit-msg)\n[![downloads](https://img.shields.io/npm/dm/validate-commit-msg.svg?style=flat-square)](http://npm-stat.com/charts.html?package=validate-commit-msg&from=2015-08-01)\n[![MIT License](https://img.shields.io/npm/l/validate-commit-msg.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n\nThis provides you a binary that you can use as a githook to validate the commit message. I recommend\n[ghooks](http://npm.im/ghooks). You'll want to make this part of the `commit-msg` githook.\n\nValidates that your commit message follows this format:\n\n```\n<type>(<scope>): <subject>\n```\n\n## Usage\n\n### options\n\nYou can specify options in `package.json`\n\n```javascript\n{\n  \"config\": {\n    \"validate-commit-msg\": {\n      \"types\": [\"feat\", \"fix\", \"docs\", \"style\", \"refactor\", \"perf\", \"test\", \"chore\", \"revert\"], // default\n      \"warnOnFail\": false, // default\n      \"maxSubjectLength\": 100, // default\n      \"subjectPattern\": \".+\", // default\n      \"subjectPatternErrorMsg\": 'subject does not match subject pattern!', // default\n      \"helpMessage\": \"\" //default\n    }\n  }\n}\n```\n\n#### types\n\nThese are the types that are allowed for your commit message. If omitted, the value is what is shown above.\n\nYou can also specify: `\"types\": \"*\"` to indicate that you don't wish to validate types\n\n#### warnOnFail\n\nIf this is set to `true` errors will be logged to the console, however the commit will still pass.\n\n#### maxSubjectLength\n\nThis will control the maximum length of the subject.\n\n#### subjectPattern\n\nOptional, accepts a RegExp to match the commit message subject against.\n\n#### subjectPatternErrorMsg\n\nIf `subjectPattern` is provided, this message will be displayed if the commit message subject does not match the pattern.\n\n#### helpMessage\n\nIf provided, the helpMessage string is displayed when a commit message is not valid. This allows projects to provide a better developer experience for new contributors.\n\nThe `helpMessage` also supports interpoling a single `%s` with the original commit message.\n\n### Other notes\n\nIf the commit message begins with `WIP` then none of the validation will happen.\n\n\n## Credits\n\nThis was originally developed by contributors to [the angular.js project](https://github.com/angular/angular.js). I\npulled it out so I could re-use this same kind of thing in other projects.\n",
  "readmeFilename": "README.md",
  "_id": "validate-commit-msg@2.6.1",
  "_shasum": "5f9418e4ec66ebebdfee2a4253d2a777bc4dfcfa",
  "_from": "validate-commit-msg@~2.6.1",
  "_resolved": "https://registry.npmjs.org/validate-commit-msg/-/validate-commit-msg-2.6.1.tgz"
}
